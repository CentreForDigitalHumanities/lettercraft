type AgentDescriptionGenderType {
  agent: AgentDescriptionType!
  certainty: Certainty!
  gender: Gender!
  id: ID!

  """Additional notes"""
  note: String!
  sourceMention: SourceMention!
}

type AgentDescriptionLocationType {
  agent: AgentDescriptionType!
  certainty: Certainty!
  id: ID!

  """location by which the agent is identified"""
  location: SpaceDescriptionType!

  """Additional notes"""
  note: String!
  sourceMention: SourceMention!
}

type AgentDescriptionType implements EntityDescription {
  """The book in the source"""
  book: String!

  """The chapter or chapters in the source"""
  chapter: String!
  contributors: [UserType!]!
  describes: [HistoricalPersonType!]!
  description: String!
  episodes: [EpisodeAgentType!]!
  gender: AgentDescriptionGenderType
  id: ID!
  identified: Boolean!

  """Whether this agent is a group of people (e.g. 'the nuns of Poitiers')."""
  isGroup: Boolean!
  location: AgentDescriptionLocationType
  name: String!

  """The page number or page range in the source"""
  page: String!
  personReferences: [PersonReferenceType!]!

  """Source text containing this description"""
  source: SourceType!

  """How is this entity presented in the text?"""
  sourceMention: PersonAgentDescriptionSourceMentionChoices
}

"""An enumeration."""
enum Certainty {
  CERTAIN
  SOMEWHAT_CERTAIN
  UNCERTAIN
}

type CreateAgentMutation {
  agent: AgentDescriptionType
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input CreateEntityDescriptionInput {
  episodes: [ID!]
  name: String!
  source: ID!
}

input CreateEpisodeEntityLinkInput {
  entity: ID!
  entityType: Entity!
  episode: ID!
}

type CreateEpisodeEntityLinkMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input CreateEpisodeInput {
  name: String!
  source: ID!
}

type CreateEpisodeMutation {
  episode: EpisodeType
  errors: [LettercraftErrorType!]!
}

type CreateGiftMutation {
  errors: [LettercraftErrorType!]!
  gift: GiftDescriptionType
  ok: Boolean!
}

type CreateLetterMutation {
  errors: [LettercraftErrorType!]!
  letter: LetterDescriptionType
  ok: Boolean!
}

input CreatePersonReferenceInput {
  description: ID!
  person: ID!
}

type CreatePersonReferenceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type CreateSpaceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
  space: SpaceDescriptionType
}

type DeleteAgentMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeleteEpisodeEntityLinkMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeleteEpisodeMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeleteGiftMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeleteLetterMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeletePersonReferenceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type DeleteSpaceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

enum Entity {
  AGENT
  GIFT
  LETTER
  SPACE
}

interface EntityDescription {
  description: String
  id: ID!
  name: String
}

type EpisodeAgentType implements EpisodeEntityLink {
  agent: AgentDescriptionType!
  certainty: Certainty!
  designators: [String!]
  entity: EntityDescription!
  episode: EpisodeType!
  id: ID!
  note: String
  sourceMention: SourceMention!
}

type EpisodeCategoryType {
  description: String!
  id: ID!
  name: String!
}

interface EpisodeEntityLink {
  designators: [String!]
  entity: EntityDescription!
  episode: EpisodeType!
  id: ID!
  note: String
  sourceMention: SourceMention!
}

type EpisodeGiftType implements EpisodeEntityLink {
  certainty: Certainty!
  designators: [String!]
  entity: EntityDescription!
  episode: EpisodeType!
  gift: GiftDescriptionType!
  id: ID!
  note: String
  sourceMention: SourceMention!
}

type EpisodeLetterType implements EpisodeEntityLink {
  certainty: Certainty!
  designators: [String!]
  entity: EntityDescription!
  episode: EpisodeType!
  id: ID!
  letter: LetterDescriptionType!
  note: String
  sourceMention: SourceMention!
}

type EpisodeSpaceType implements EpisodeEntityLink {
  certainty: Certainty!
  designators: [String!]
  entity: EntityDescription!
  episode: EpisodeType!
  id: ID!
  note: String
  sourceMention: SourceMention!
  space: SpaceDescriptionType!
}

type EpisodeType implements EntityDescription {
  """agents involved in this episode"""
  agents: [AgentDescriptionType!]!

  """The book in the source"""
  book: String!
  categories: [EpisodeCategoryType!]!

  """The chapter or chapters in the source"""
  chapter: String!
  contributors: [UserType!]!
  description: String!

  """
  Relevant (Latin) terminology used to describe the actions in the episode
  """
  designators: [String!]!

  """gifts involved in this episode"""
  gifts: [GiftDescriptionType!]!
  id: ID!

  """letters involved in this episode"""
  letters: [LetterDescriptionType!]!
  name: String!

  """The page number or page range in the source"""
  page: String!

  """Source text containing this description"""
  source: SourceType!

  """How is this entity presented in the text?"""
  sourceMention: EventEpisodeSourceMentionChoices

  """locations involved in this episode"""
  spaces: [SpaceDescriptionType!]!

  """full description of the events in the passage"""
  summary: String!
}

"""An enumeration."""
enum EventEpisodeSourceMentionChoices {
  """directly mentioned"""
  DIRECT

  """implied"""
  IMPLIED
}

"""An enumeration."""
enum Gender {
  FEMALE
  MALE
  MIXED
  OTHER
  UNKNOWN
}

input GiftCategorisationInput {
  category: ID!
  certainty: String
  id: ID
  note: String
  sourceMention: SourceMention
}

type GiftCategoryType {
  description: String!
  id: ID!
  name: String!
}

type GiftDescriptionCategoryType {
  category: GiftCategoryType!
  certainty: Certainty!
  gift: GiftDescriptionType!
  id: ID!

  """Additional notes"""
  note: String!
  sourceMention: SourceMention!
}

type GiftDescriptionType implements EntityDescription {
  """The book in the source"""
  book: String!
  categories: [GiftCategoryType!]!
  categorisations: [GiftDescriptionCategoryType!]!

  """The chapter or chapters in the source"""
  chapter: String!
  contributors: [UserType!]!
  description: String!
  episodes: [EpisodeGiftType!]!
  id: ID!
  name: String!

  """The page number or page range in the source"""
  page: String!

  """Source text containing this description"""
  source: SourceType!

  """How is this entity presented in the text?"""
  sourceMention: LetterGiftDescriptionSourceMentionChoices
}

type HistoricalPersonType {
  contributors: [UserType!]!
  dateOfBirth: PersonDateOfBirthType
  dateOfDeath: PersonDateOfDeathType
  description: String!
  id: ID!

  """
  Whether this entity is identifiable (i.e. can be cross-referenced between descriptions), or a generic description
  """
  identifiable: Boolean!
  name: String!
}

input LetterCategorisationInput {
  category: ID!
  certainty: String
  id: ID
  note: String
  sourceMention: SourceMention
}

type LetterCategoryType {
  description: String!
  id: ID!
  label: String!
}

type LetterDescriptionCategoryType {
  category: LetterCategoryType!
  certainty: Certainty!
  id: ID!
  letter: LetterDescriptionType!

  """Additional notes"""
  note: String!
  sourceMention: SourceMention!
}

type LetterDescriptionType implements EntityDescription {
  """The book in the source"""
  book: String!
  categories: [LetterCategoryType!]!
  categorisations: [LetterDescriptionCategoryType!]!

  """The chapter or chapters in the source"""
  chapter: String!
  contributors: [UserType!]!
  description: String!
  episodes: [EpisodeLetterType!]!
  id: ID!
  name: String!

  """The page number or page range in the source"""
  page: String!

  """Source text containing this description"""
  source: SourceType!

  """How is this entity presented in the text?"""
  sourceMention: LetterLetterDescriptionSourceMentionChoices
}

"""An enumeration."""
enum LetterGiftDescriptionSourceMentionChoices {
  """directly mentioned"""
  DIRECT

  """implied"""
  IMPLIED
}

"""An enumeration."""
enum LetterLetterDescriptionSourceMentionChoices {
  """directly mentioned"""
  DIRECT

  """implied"""
  IMPLIED
}

"""
A simple wrapper around Graphene-Django's ErrorType with a constructor.
"""
type LettercraftErrorType {
  field: String!
  messages: [String!]!
}

type Mutation {
  createAgent(agentData: CreateEntityDescriptionInput!): CreateAgentMutation
  createEpisode(episodeData: CreateEpisodeInput!): CreateEpisodeMutation
  createEpisodeEntityLink(data: CreateEpisodeEntityLinkInput!): CreateEpisodeEntityLinkMutation
  createGift(giftData: CreateEntityDescriptionInput!): CreateGiftMutation
  createLetter(letterData: CreateEntityDescriptionInput!): CreateLetterMutation
  createPersonReference(referenceData: CreatePersonReferenceInput!): CreatePersonReferenceMutation
  createSpace(spaceData: CreateEntityDescriptionInput!): CreateSpaceMutation
  deleteAgent(id: ID!): DeleteAgentMutation
  deleteEpisode(id: ID!): DeleteEpisodeMutation
  deleteEpisodeEntityLink(entity: ID!, entityType: Entity!, episode: ID!): DeleteEpisodeEntityLinkMutation
  deleteGift(id: ID!): DeleteGiftMutation
  deleteLetter(id: ID!): DeleteLetterMutation
  deletePersonReference(id: ID!): DeletePersonReferenceMutation
  deleteSpace(id: ID!): DeleteSpaceMutation
  updateAgent(agentData: UpdateAgentInput!): UpdateAgentMutation
  updateEpisode(episodeData: UpdateEpisodeInput!): UpdateEpisodeMutation
  updateEpisodeEntityLink(data: UpdateEpisodeEntityLinkInput!): UpdateEpisodeEntityLinkMutation
  updateGift(giftData: UpdateGiftInput!): UpdateGiftMutation
  updateLetter(letterData: UpdateLetterInput!): UpdateLetterMutation
  updateOrCreateSource(sourceData: UpdateCreateSourceInput!): UpdateOrCreateSourceMutation
  updatePersonReference(referenceData: UpdatePersonReferenceInput!): UpdatePersonReferenceMutation
  updateSpace(spaceData: UpdateSpaceInput!): UpdateSpaceMutation
}

"""An enumeration."""
enum PersonAgentDescriptionSourceMentionChoices {
  """directly mentioned"""
  DIRECT

  """implied"""
  IMPLIED
}

type PersonDateOfBirthType {
  certainty: Certainty!
  displayDate: String!
  id: ID!

  """Additional notes"""
  note: String!

  """date on which this person was born"""
  person: HistoricalPersonType!

  """
  The exact year of the value (if known). This will override the values in the lower and upper bounds fields.
  """
  yearExact: Int

  """The earliest possible year for this value"""
  yearLower: Int!

  """The latest possible year for this value"""
  yearUpper: Int!
}

type PersonDateOfDeathType {
  certainty: Certainty!
  displayDate: String!
  id: ID!

  """Additional notes"""
  note: String!

  """date on which this person died"""
  person: HistoricalPersonType!

  """
  The exact year of the value (if known). This will override the values in the lower and upper bounds fields.
  """
  yearExact: Int

  """The earliest possible year for this value"""
  yearLower: Int!

  """The latest possible year for this value"""
  yearUpper: Int!
}

type PersonReferenceType {
  certainty: Certainty!
  description: AgentDescriptionType!
  id: ID!

  """Additional notes"""
  note: String!
  person: HistoricalPersonType!
}

type Query {
  agentDescription(id: ID!): AgentDescriptionType
  agentDescriptions(episodeId: ID, sourceId: ID): [AgentDescriptionType!]!
  episode(id: ID!): EpisodeType
  episodeCategories: [EpisodeCategoryType!]!
  episodeEntityLink(entity: ID!, entityType: Entity!, episode: ID!): EpisodeEntityLink
  episodes(sourceId: ID): [EpisodeType!]!
  giftDescription(id: ID!): GiftDescriptionType
  giftDescriptions(episodeId: ID, sourceId: ID): [GiftDescriptionType!]!
  letterCategories: [LetterCategoryType!]!
  letterDescription(id: ID!): LetterDescriptionType
  letterDescriptions(episodeId: ID, sourceId: ID): [LetterDescriptionType!]!
  regions: [RegionType!]!
  settlements: [SettlementType!]!
  source(id: ID!): SourceType!
  sources: [SourceType!]!
  spaceDescription(id: ID!): SpaceDescriptionType
  spaceDescriptions(sourceId: ID): [SpaceDescriptionType!]!
  structures: [StructureType!]!
  userDescription(id: ID!): UserType
  userDescriptions: [UserType!]!
}

type RegionFieldType {
  certainty: Certainty!
  id: ID!

  """Additional notes"""
  note: String!
  region: RegionType!
  sourceMention: SourceMention!
  space: SpaceDescriptionType!
}

type RegionType {
  contributors: [UserType!]!
  description: String!
  id: ID!

  """
  Whether this entity is identifiable (i.e. can be cross-referenced between descriptions), or a generic description
  """
  identifiable: Boolean!
  name: String!

  """Kind of region"""
  type: SpaceRegionTypeChoices!
}

type SettlementFieldType {
  certainty: Certainty!
  id: ID!

  """Additional notes"""
  note: String!
  settlement: SettlementType!
  sourceMention: SourceMention!
  space: SpaceDescriptionType!
}

type SettlementType {
  contributors: [UserType!]!
  description: String!
  id: ID!

  """
  Whether this entity is identifiable (i.e. can be cross-referenced between descriptions), or a generic description
  """
  identifiable: Boolean!
  name: String!

  """Surrounding regions of this settlement"""
  regions: [RegionType!]!
}

type SourceContentsDateType {
  displayDate: String!
  id: ID!

  """The source whose events took place at this date"""
  source: SourceType!

  """
  The exact year of the value (if known). This will override the values in the lower and upper bounds fields.
  """
  yearExact: Int

  """The earliest possible year for this value"""
  yearLower: Int!

  """The latest possible year for this value"""
  yearUpper: Int!
}

"""An enumeration."""
enum SourceMention {
  DIRECT
  IMPLIED
}

type SourceType {
  agents: [AgentDescriptionType!]!
  contentsDate: SourceContentsDateType

  """The name of the author of the edition"""
  editionAuthor: String!

  """The title of the edition used for this source"""
  editionTitle: String!
  episodes: [EpisodeType!]!
  gifts: [GiftDescriptionType!]!
  id: ID!
  letters: [LetterDescriptionType!]!

  """The name of the original author of the work, if known"""
  medievalAuthor: String!

  """The original title of the work, if known"""
  medievalTitle: String!

  """a unique name to identify this source in the database"""
  name: String!
  numOfEpisodes: Int!
  spaces: [SpaceDescriptionType!]!
  writtenDate: SourceWrittenDateType
}

type SourceWrittenDateType {
  displayDate: String!
  id: ID!

  """The source that was written at this date"""
  source: SourceType!

  """
  The exact year of the value (if known). This will override the values in the lower and upper bounds fields.
  """
  yearExact: Int

  """The earliest possible year for this value"""
  yearLower: Int!

  """The latest possible year for this value"""
  yearUpper: Int!
}

type SpaceDescriptionType implements EntityDescription {
  """The book in the source"""
  book: String!

  """The chapter or chapters in the source"""
  chapter: String!
  contributors: [UserType!]!
  description: String!
  episodes: [EpisodeSpaceType!]!
  hasIdentifiableFeatures: Boolean!
  id: ID!
  name: String!

  """The page number or page range in the source"""
  page: String!
  regionFields: [RegionFieldType!]!
  regions: [RegionType!]!
  settlementFields: [SettlementFieldType!]!
  settlements: [SettlementType!]!

  """Source text containing this description"""
  source: SourceType!

  """How is this entity presented in the text?"""
  sourceMention: SpaceSpaceDescriptionSourceMentionChoices
  structureFields: [StructureFieldType!]!
  structures: [StructureType!]!
}

"""An enumeration."""
enum SpaceRegionTypeChoices {
  """ecclesiastical"""
  ECCLESIASTICAL

  """geographical"""
  GEOGRAPHICAL

  """political"""
  POLITICAL
}

"""An enumeration."""
enum SpaceSpaceDescriptionSourceMentionChoices {
  """directly mentioned"""
  DIRECT

  """implied"""
  IMPLIED
}

"""An enumeration."""
enum SpaceStructureLevelChoices {
  """road, square, crossroad"""
  A_1

  """fortification"""
  A_2

  """building, vessel"""
  A_3

  """room"""
  A_4

  """spot, object"""
  A_5
}

type StructureFieldType {
  certainty: Certainty!
  id: ID!

  """Additional notes"""
  note: String!
  sourceMention: SourceMention!
  space: SpaceDescriptionType!
  structure: StructureType!
}

type StructureType {
  contributors: [UserType!]!
  description: String!
  id: ID!

  """
  Whether this entity is identifiable (i.e. can be cross-referenced between descriptions), or a generic description
  """
  identifiable: Boolean!
  level: SpaceStructureLevelChoices!
  name: String!

  """The settlement containing this structure"""
  settlement: SettlementType
}

input UpdateAgentGenderInput {
  gender: Gender
  note: String
  sourceMention: SourceMention
}

input UpdateAgentInput {
  description: String
  gender: UpdateAgentGenderInput
  id: ID!
  isGroup: Boolean
  location: UpdateAgentLocationInput
  name: String
}

input UpdateAgentLocationInput {
  location: ID
  note: String
  sourceMention: SourceMention
}

type UpdateAgentMutation {
  agent: AgentDescriptionType
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input UpdateCreateSourceInput {
  editionAuthor: String
  editionTitle: String
  id: ID
  medievalAuthor: String
  medievalTitle: String
  name: String!
}

input UpdateEpisodeEntityLinkInput {
  designators: [String!]
  entity: ID!
  entityType: Entity!
  episode: ID!
  note: String
  sourceMention: SourceMention
}

type UpdateEpisodeEntityLinkMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input UpdateEpisodeInput {
  book: String
  categories: [ID!]
  chapter: String
  description: String
  designators: [String!]
  id: ID!
  name: String
  page: String
  summary: String
}

type UpdateEpisodeMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input UpdateGiftInput {
  book: String
  categories: [ID!]
  categorisations: [GiftCategorisationInput!]
  chapter: String
  description: String
  id: ID!
  name: String
  page: String
}

type UpdateGiftMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input UpdateLetterInput {
  book: String
  categories: [ID!]
  categorisations: [LetterCategorisationInput!]
  chapter: String
  description: String
  id: ID!
  name: String
  page: String
}

type UpdateLetterMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type UpdateOrCreateSourceMutation {
  errors: [String]
  source: SourceType
}

input UpdatePersonReferenceInput {
  certainty: Certainty
  id: ID!
  note: String
}

type UpdatePersonReferenceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

input UpdateSpaceInput {
  book: String
  categories: [ID!]
  chapter: String
  description: String
  id: ID!
  name: String
  page: String
}

type UpdateSpaceMutation {
  errors: [LettercraftErrorType!]!
  ok: Boolean!
}

type UserType {
  firstName: String!
  fullName: String!
  id: ID!
  lastName: String!
}